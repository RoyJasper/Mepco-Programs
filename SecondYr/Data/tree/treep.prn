^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                     BINARY SEARCH TREE USING POINTER
**************************************************************************
HEADER FILE:
 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct node
{
int data;
struct node * left;
struct node * right;
};
typedef struct node * bst;
bst insert(int ,bst);
bst deletion(int ,bst);
bst findmax(bst);
void inorder(bst);
void preorder(bst);
void postorder(bst);

APPLICATION FILE:

#include"head.h"
main()
{
int x,n,l;
bst i;
bst t=NULL;
do
{
printf("\nEnter choice \n1.Insert \n2.Delete\n3.inorder\n4.preorder\n5.postorder\n6.Exit\n ");
scanf("%d",&n);
switch(n)
{
case 1:
printf("\nEnter the element ");
scanf("%d",&x);
t=insert(x,t);
//printf("\n INORDER  :\t");inorder(t);
//printf("\n PREORDER :\t");preorder(t);
//printf("\n POSTORDER:\t");postorder(t);
break;
case 2:
printf("\nEnter element to be deleted");
scanf("%d",&x);
t=deletion(x,t);
if(t==NULL)
{
printf("\n PREORDER:");
preorder(t);
}
break;
case 3:
inorder(t);
break;
case 4:
preorder(t);
break;
case 5:
postorder(t);
break;
case 6:
exit(0);
break;
default:
printf("Invalid");
break;
}}while(1);
}

IMPLEMENTATION FILE:

#include"head.h"
bst insert(int x , bst t)
{
bst temp;
if(t==NULL)
{
t = (bst) malloc(sizeof(struct node));
t->data=x;
t->left=NULL;
t->right=NULL;
}
else
if(x<t->data)
t->left=insert(x,t->left);
else if(x>t->data)
t->right=insert(x,t->right);
else 
printf("\n THE ELEMENT PRESENT IN THE TREE IS");
return t;
}
bst deletion(int x , bst t)
{
bst temp;
if(t==NULL)
{
printf("TREE IS EMPTY");
}
if(x<t->data)
t->left=deletion(x,t->left);
else
if(x>t->data)
t->right=deletion(x,t->right);
else
{
if(t->left!=NULL&& t->right!=NULL)
{
temp = findmax(t->left);
t->data = temp->data;
t->right = deletion(t->data,t->left);
}
else
if(t->left==NULL)
{
temp=t;
t=t->right;
}
else if(t->right==NULL)
{
temp=t;
t=t->right;
free(temp);
}
}
return t;
}
bst findmax(bst t)
{
while(t->right!=NULL)
{
t=t->right;
}
return t;
}
void inorder(bst t)
{
if(t!=NULL)
{
inorder(t->left);
printf("\t%d",t->data);
inorder(t->right);
}
}
void preorder(bst t)
{
if(t!=NULL)
{
printf("\t%d",t->data);;
preorder(t->left);
preorder(t->right);
}
}
void postorder(bst t)
{
if(t!=NULL)
{
postorder(t->left);
postorder(t->right);
printf("\t%d",t->data);
}
}

OUTPUT:


Enter the element 3

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 1

Enter the element 5

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 1

Enter the element 7

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 1

Enter the element 19

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 1

Enter the element 22

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 1

Enter the element 8

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 1

Enter the element 25

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 3
	3	5	7	8	11	19	22	25
Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 4
	11	3	5	7	8	19	22	25
Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 5
	8	7	5	3	25	22	19	11
Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 2

Enter element to be deleted19

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 2

Enter element to be deleted7

Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 3
	3	5	8	11	22	25
Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 4
	11	3	5	8	22	25
Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 5
	8	5	3	25	22	11
Enter choice 
1.Insert 
2.Delete
3.inorder
4.preorder
5.postorder
6.Exit
 6
bash-3.2$ exit
exit

Script done on Mon 31 Aug 2015 04:07:16 PM IST
