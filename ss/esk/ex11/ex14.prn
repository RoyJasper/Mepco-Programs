******************************************************************************
EX NO:14			NAME:RAHUL RAJAN D
DATE:18.10.16			ROLLNO:14BIT053
******************************************************************************
     IMPLEMENTAION OF LINKING LOADER
*****************************************************************************
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
char load[50][50],ads[50][50];
struct mp
{
        char addr[50],first[20],second[20];
};
typedef struct mp *node;
node initialize()
{
	node t;
	t=(node)malloc(sizeof(struct mp));
	return t;
}
int convert(char length[50])
{
	int a,i,b;
	char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
	for(i=0;i<16;i++)
		if(length[1]==hex[i])
		{
			a=i;
			break;
		}
	if(length[0]=='1')
	{
		b=length[0]-48;
		b=b*16;
		a=a+b;
	}
	return a;
}
char* binary(char s,char string1[10])
{
	int i,n,a,r,j=0;
	char str[]="0000";
	char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
	for(i=0;i<16;i++)
		if(s==hex[i])
		{
			a=i;
			break;
		}
	i=0;
	n=a;
	while(n!=0)
	{
		r=n%2;
		str[i]=r+48;
		i++;
		n=n/2;
	}
	for(i=strlen(str)-1;i>=0;i--)
	{
		string1[j]=str[i];
		j++;
	}
	return string1;
}
char * incre(char addr1[50])
{
	int k,j,a,i;
	char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
	k=5;
begin:
	for(i=0;i<16;i++)
		if(addr1[k]==hex[i])
		{
			a=i;
			break;
		}
	a=a+1;
	if(a<16)
	{
		addr1[k]=hex[a];
	}
	else
	{
		addr1[k]='0';
		k=k-1;
		if(k>=0)
			goto begin;
	}
	return addr1;
}
int insert(char name[50],char type[50],char addr[50],FILE *fp)
{
        int n=0,i,j;
        node nn;
        nn=initialize();
        strcpy(nn->addr,name);
        strcpy(nn->first,type);
        strcpy(nn->second,addr);
        fwrite(&nn,sizeof(node),1,fp);
	return 1;
}
void disp(FILE *fp5)
{
        node nn;
        int t=0;
        char c;
        nn=initialize();
	printf("\nADDRESS\tFIRST\tSECOND");
        while((c = fgetc(fp5)) != EOF)
        {
                fseek(fp5,sizeof(node)*t,SEEK_SET);
                fread(&nn,sizeof(node),1,fp5);
                printf("\n %s\t %s\t %s\t",nn->addr,nn->first,nn->second);
                printf("\n");
                t++;
                fseek(fp5,sizeof(node)*t,SEEK_SET);
        }
        fclose(fp5);
}

char * adder(char a[50],char b[50])
{
	int k,kk,aa,bb,j,i,ka=0;
	char as[6]; 
	k=5;
	kk=3;
        char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
        j=aa;
	while(k!=-1)
	{
        	for(i=0;i<16;i++)
                {
                	if(a[k]==hex[i])
                        {
                	        aa=i;
                                break;
                        }
                }			
		for(i=0;i<16;i++)
                {
                	if(b[k]==hex[i])
                        {
                	        bb=i;
                                break;
                        }
                }
		aa=bb+aa;
		if(aa<16)
		{
			b[k]=hex[aa];
			k=k-1;
		}
		else
		{
		njk:	aa=aa-16;
			b[k]=hex[aa];
			k=k-1;
			for(i=0;i<16;i++)
                	{
                		if(b[k]==hex[i])
                     		{
                			aa=i;
                     	         	break;
                       		}
                	}	
			aa++;
			if(aa==16)
			{
				ka=ka+1;
				goto njk;
			}
			b[k]=hex[aa];
			k=k+ka;
		}
	}
	return b;
}
	
void passone()
{
	int i=0,j,k=0,kk,jj,ii=0,ll=0;
	char addr[50],last[50],name[50][50],namee[50],addrr[50][50],d,add[]="000003";
	FILE *fp;
	fp=fopen("objpro.c","r");
	printf("ENTER THE ADDRESS LOCATION");
	scanf("%s",addr);
	printf("\nPASS ONE:");
	printf("\nLOAD MAP:");
	d=fgetc(fp);
	for(jj=0;jj<3;jj++)
	{
	for(i=0;i<50;i++)
	{
		strcpy(addrr[i],"1");
	}
	d=fgetc(fp);
	d=fgetc(fp);
	i=0;
	while(d!='^')
	{
		namee[i]=d;
		i++;
		d=fgetc(fp);
	}
	while(ii!=2)
	{
		if(d=='^')
			ii++;
		d=getc(fp);
	}
	for(i=0;i<6;i++)
	{
		last[i]=d;
		d=fgetc(fp);
	}
	strcpy(last,adder(add,last));
	while(d!='D')
	{
		d=fgetc(fp);
	}
	d=fgetc(fp);
	d=fgetc(fp);
	i=0;
	k=0;
	kk=0;
	j=0;
	while(d!='R'&&d!='\n')
	{
		if(d=='^')
		{
			i++;
			if(kk==2)
			{
				kk=0;
				k++;
			}
			j=0;
		}
		else
		{
			if(i%2==0)
			{
				name[k][j]=d;
				j++;
			}
			else
			{
				addrr[k][j]=d;
				j++;
				kk=2;
			}
		}
		d=fgetc(fp);
	}
	k++;
	for(i=0;i<k;i++)
		strcpy(addrr[i],adder(addr,addrr[i]));
	printf("\n%s\t%s\t%s\n",namee,addr,last);	
	strcpy(load[ll],namee);
	strcpy(ads[ll],addr);
	ll++;
	for(i=0;i<k;i++)
		printf("%s\t%s\n",name[i],addrr[i]);
	for(i=0;i<k;i++)
	{
		strcpy(load[ll],name[i]);
		strcpy(ads[ll],addrr[i]);
		ll++;
	}
	while(d!='H' && jj!=2)
		d=fgetc(fp);
	ii=0;
	strcpy(addr,adder(last,addr));
	}
}
char aaa[50];
int loader()
{
	int i,len,m,ifg,igg;
	char name[50],name1[50],address[50],length[50],string1[10],string2[10],d;
	char addr1[]="000000";
	FILE *fp,*fp2;
	fp=fopen("objpro.c","r");
	fp2=fopen("loade.bin","wb+");
	node nn;
	nn=initialize();
	i=0;
	while(i!=50)
	{
		name1[i]='\0';
		length[i]='\0';
		string1[i]='\0';
		string2[i]='\0';
		i++;
	}
	d=fgetc(fp);
	for(igg=0;igg<3;igg++)
	{
		d=fgetc(fp);
		d=fgetc(fp);
		i=0;
		while(d!='^')
		{
			name[i]=d;
			i++;
			d=fgetc(fp);
		}
		for(ifg=0;ifg<9;ifg++)
		{
			if(strcmp(name,load[ifg])==0)
				break;
		}
		i=0;
		while(i!=3)
		{
			d=fgetc(fp);
			if(d=='\n')
				i++;
		}
		d=fgetc(fp);
		while(d=='T')
		{
			d=fgetc(fp);
			d=fgetc(fp);
			i=0;
			while(d!='^')
			{
				addr1[i]=d;
				d=fgetc(fp);
				i++;
			}
			strcpy(addr1,adder(ads[ifg],addr1));
			d=fgetc(fp);
			i=0;
			while(d!='^')
			{
				length[i]=d;
				d=fgetc(fp);
				i++;
			}
			len=convert(length);
			for(i=0;i<len;i++)
			{
				strcpy(address,addr1);
					d=fgetc(fp);
				if(d=='^')
					d=fgetc(fp);
				strcpy(string1,binary(d,string1));
				d=fgetc(fp);
				strcpy(string2,binary(d,string2));
				m=insert(address,string1,string2,fp2);
				strcpy(addr1,incre(addr1));
			}
			d=fgetc(fp);
			d=fgetc(fp);
		}
		while(d!='H'&& igg!=2)
		{
			d=fgetc(fp);
		}
	}
	fclose(fp);
	fclose(fp2);	
	return 0;
}
char * subtract(char a[50],char b[50])
{
	int k,kk,aa,bb,j,i,ka=0;
	char as[6]; 
	k=5;
	kk=3;
        char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
        j=aa;
	while(k!=-1)
	{
        	for(i=0;i<16;i++)
                {
                	if(a[k]==hex[i])
                        {
                	        aa=i;
                                break;
                        }
                }			
		for(i=0;i<16;i++)
                {
                	if(b[k]==hex[i])
                        {
                	        bb=i;
                                break;
                        }
                }
		aa=bb-aa;
		if(aa>-1)
		{
			b[k]=hex[aa];
			k=k-1;
		}
		else
		{
		njk:	aa=aa+16;
			b[k]=hex[aa];
			k=k-1;
			for(i=0;i<16;i++)
                	{
                		if(b[k]==hex[i])
                     		{
                			aa=i;
                     	         	break;
                       		}
                	}	
			aa--;
			if(aa==-1)
			{
				ka=ka+1;
				goto njk;
			}
			b[k]=hex[aa];
			k=k+ka;
		}
	}
	return b;
}
int po(int a,int b)
{
	int c=1,i;
	if(b==0)
	{
		return 1;
	}
	else
	{
		for(i=1;i<=b;i++)
		{
			c=c*a;
		}
		return c;
	}
}
char bintohex(char str[50])
{
	int j=0,i,c;
	char a[50],b;
	char hex[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
	for(i=strlen(str)-1;i>=0;i--)
	{
		a[j]=str[i];
		j++;
	}
	c=0;
	for(i=0;i<j;i++)
		if(a[i]=='1')
			c=c+po(2,i);
	for(i=0;i<16;i++)
		if(i==c)
			b=hex[i];
	return b;
}
void func(char addr1[50],char addr2[50],int kl,char cc)
{
	FILE *fp,*fp1;
	node nn,nn1;
	int t=0,j,i,k,m;
	char a[]="000000";
	char string1,string2,c,addr3[50],addr4[50],address[50];
	nn=initialize();
	nn1=initialize();
	if(kl%2==0)
	{
		fp=fopen("loade.bin","rb+");
		fp1=fopen("loadee.bin","wb+");
	}
	else
	{
		fp1=fopen("loade.bin","wb+");
		fp=fopen("loadee.bin","rb");
	}
	fseek(fp,sizeof(node)*t,SEEK_SET);
	while((c = fgetc(fp)) != EOF)
        {
                fseek(fp,sizeof(node)*t,SEEK_SET);
                fread(&nn,sizeof(node),1,fp);
		if(strcmp(nn->addr,addr1)==0)
		{	
			strcpy(addr4,nn->addr);
			j=0;
			for(i=0;i<3;i++)
			{
				string1=bintohex(nn->first);
				string2=bintohex(nn->second);
				a[j]=string1;
				j++;
				a[j]=string2;
				j++;
				t++;
				fseek(fp,sizeof(node)*t,SEEK_SET);
                		fread(&nn,sizeof(node),1,fp);
				strcpy(nn1->addr,nn->addr);
				strcpy(nn1->first,nn->first);
				strcpy(nn1->second,nn->second);
			}
			strcpy(addr3,a);
			if(cc=='+')
				strcpy(addr3,adder(addr2,addr3));
			else
				strcpy(addr3,subtract(addr2,addr3));
			for(i=0;i<6;i=i+2)
			{
				strcpy(address,addr4);
				strcpy(nn->first,binary(addr3[i],nn->first));
				strcpy(nn->second,binary(addr3[i+1],nn->second));
				m=insert(address,nn->first,nn->second,fp1);
				strcpy(addr1,incre(addr4));
			}
			fseek(fp,sizeof(node)*t,SEEK_SET);
                		fread(&nn,sizeof(node),1,fp);
			m=insert(nn1->addr,nn1->first,nn1->second,fp1);
			t=t+1;
		}
		else
		{
			m=insert(nn->addr,nn->first,nn->second,fp1);
			t++;
		}
	}
	fclose(fp);
	fclose(fp1);
}
void reloc()
{
	char rl[50],name1[50],c,addr[50],name[50];
	int i,kl=0,ifg,j;
	FILE *fp,*fp1,*fp2;
	fp=fopen("objpro.c","r");
	c=fgetc(fp);
	for(j=0;j<3;j++)
	{
		c=fgetc(fp);
		c=fgetc(fp);
		i=0;
		while(i!=50)
		{
			name[i]='\0';
			i++;
		}
		i=0;
		while(c!='^')
		{	
			name[i]=c;
			c=fgetc(fp);
			i++;
		}
		for(ifg=0;ifg<9;ifg++)
		{
			if(strcmp(name,load[ifg])==0)
				break;
		}
		strcpy(name,ads[ifg]);
		while(c!='M')
		{
			c=fgetc(fp);
		}
		i=0;
		while(i!=50)
		{
			name1[i]='\0';
			i++;
		}
		while(c=='M')
		{
			i=0;
			c=fgetc(fp);
			c=fgetc(fp);
			while(c!='^')
			{
				name1[i]=c;
				c=fgetc(fp);
				i++;
			}
			c=fgetc(fp);
			strcpy(name1,adder(name,name1));
			while(c!='^')
			{
				c=fgetc(fp);
			}
			c=fgetc(fp);
			i=0;
			while(i!=50)
			{
				rl[i]='\0';
				i++;
			}
			i=0;
			while(c!='\n')
			{
				if(c=='+'||c=='-')
				{
					addr[0]=c;
					c=fgetc(fp);
				}
				else
				{
					rl[i]=c;
					c=fgetc(fp);
					i++;
				}
			}
			for(ifg=0;ifg<9;ifg++)
			{
				if(strcmp(rl,load[ifg])==0)
					break;
			}
			strcpy(rl,ads[ifg]);
			func(name1,rl,kl,addr[0]);
			c=fgetc(fp);
			kl=kl+1;
		}
		while(c!='H'&& j<2)
		{
			c=fgetc(fp);
		}	
	}
	if(kl%2==1)
		fp2=fopen("loadee.bin","rb+");
	else
		fp2=fopen("loade.bin","rb+");
	printf("\nPASS TWO:\n");
	disp(fp2);
}
int main()
{
	int i=0;
	passone();
	loader();
	reloc();
}
]0;rahul@ubuntu: ~/Documents/lab/5SEM/SS/ex14[01;32mrahul@ubuntu[00m:[01;34m~/Documents/lab/5SEM/SS/ex14[00m$ cat objpro.c
H^PROGA^000000^000060
D^LISTA^000040^ENDA^000054
R^lISTB^ENDB^LISTC^ENDC
T^000020^0A^03201D^77100004^05001A
T^000054^0F^000014^FFFFF6^00003F^000014^FFFFC0
M^000024^05^+LISTB
M^000054^04^+LISTC
M^000057^04^+ENDC
M^000057^04^-LISTC
M^00005A^04^+ENDC
M^00005A^04^-LISTC
M^00005A^04^+PROGA
M^00005D^04^-ENDB
M^00005D^04^+LISTB
M^000060^04^+LISTB
M^000060^04^-PROGA
E^000000

H^PROGB^000000^00007C
D^LISTB^000060^ENDB^000070
R^lISTA^ENDA^LISTC^ENDC
T^000036^0B^03100000^742027^05100000
T^000070^0F^000000^FFFFF6^FFFFFF^FFFFF0^000060
M^000037^05^+LISTA
M^00003E^05^+ENDA
M^00003E^05^+LISTA
M^000070^04^+ENDA
M^000070^04^-LISTA
M^000070^04^+LISTC
M^000073^04^+ENDC
M^000073^04^+LISTC
M^000076^04^+ENDC
M^000076^04^-LISTC
M^000076^04^+LISTA
M^000079^04^+ENDA
M^000079^04^-LISTA
M^00007C^04^+PROGB
M^00007C^04^-LISTA

H^PROGC^000000^000051
D^LISTC^000030^ENDC^000042
R^lISTA^ENDA^LISTB^ENDB
T^000010^0C^03100000^77100004^05100000
T^000042^0F^000030^00000B^000011^000000^000000
M^000011^05^+LISTA
M^000015^05^+LISTB
M^000015^05^+ENDA
M^000015^05^+LISTA
M^000042^04^+ENDA
M^000042^04^-LISTA
M^000042^04^+PROGC
M^000048^04^+LISTA
M^00004B^04^+ENDA
M^00004B^04^-LISTA
M^00004B^04^-ENDB
M^00004B^04^+LISTB
M^00004E^04^+LISTB
M^00004E^04^-LISTA

]0;rahul@ubuntu: ~/Documents/lab/5SEM/SS/ex14[01;32mrahul@ubuntu[00m:[01;34m~/Documents/lab/5SEM/SS/ex14[00m$ cc pass1.c
]0;rahul@ubuntu: ~/Documents/lab/5SEM/SS/ex14[01;32mrahul@ubuntu[00m:[01;34m~/Documents/lab/5SEM/SS/ex14[00m$ ./a.out
ENTER THE ADDRESS LOCATION004000

PASS ONE:
LOAD MAP:
PROGA	004000	000063
LISTA	004040
ENDA	004054

PROGB	004063	00007F
LISTB	0040C3
ENDB	0040D3

PROGC	0040E2	000054
LISTC	004112
ENDC	004124

PASS TWO:

ADDRESS	FIRST	SECOND
 004020	 0000	 0011	

 004021	 0010	 0000	

 004022	 0001	 1101	

 004023	 0111	 0111	

 004024	 0001	 0000	

 004025	 0100	 0000	

 004026	 1100	 0111	

 004027	 0000	 0101	

 004028	 0000	 0000	

 004029	 0001	 1010	

 004054	 0000	 0000	

 004055	 0100	 0001	

 004056	 0010	 0110	

 004057	 0000	 0000	

 004058	 0000	 0000	

 004059	 0000	 1000	

 00405A	 0000	 0000	

 00405B	 0100	 0000	

 00405C	 0101	 0001	

 00405D	 0000	 0000	

 00405E	 0100	 0000	

 00405F	 0000	 0100	

 004060	 0000	 0000	

 004061	 0000	 0000	

 004062	 1000	 0011	

 004099	 0000	 0011	

 00409A	 0001	 0000	

 00409B	 0100	 0000	

 00409C	 0100	 0000	

 00409D	 0111	 0100	

 00409E	 0010	 0000	

 00409F	 0010	 0111	

 0040A0	 0000	 0101	

 0040A1	 0001	 0000	

 0040A2	 1000	 0000	

 0040A3	 1001	 0100	

 0040D3	 0000	 0000	

 0040D4	 0100	 0001	

 0040D5	 0010	 0110	

 0040D6	 0000	 0000	

 0040D7	 1000	 0010	

 0040D8	 0010	 1100	

 0040D9	 0000	 0000	

 0040DA	 0100	 0000	

 0040DB	 0101	 0001	

 0040DC	 0000	 0000	

 0040DD	 0000	 0000	

 0040DE	 0000	 0100	

 0040DF	 0000	 0000	

 0040E0	 0000	 0000	

 0040E1	 1000	 0011	

 0040F2	 0000	 0011	

 0040F3	 0001	 0000	

 0040F4	 0100	 0000	

 0040F5	 0100	 0000	

 0040F6	 0111	 0111	

 0040F7	 0001	 0000	

 0040F8	 1100	 0001	

 0040F9	 0101	 1011	

 0040FA	 0000	 0101	

 0040FB	 0001	 0000	

 0040FC	 0000	 0000	

 0040FD	 0000	 0000	

 004124	 0000	 0000	

 004125	 0100	 0001	

 004126	 0010	 0110	

 004127	 0000	 0000	

 004128	 0000	 0000	

 004129	 0000	 1011	

 00412A	 0000	 0000	

 00412B	 0100	 0000	

 00412C	 0101	 0001	

 00412D	 0000	 0000	

 00412E	 0100	 0000	

 00412F	 0000	 0100	

 004130	 0000	 0000	

 004131	 0000	 0000	

 004132	 1000	 0011	

 004132	 0000	 0000	
]0;rahul@ubuntu: ~/Documents/lab/5SEM/SS/ex14[01;32mrahul@ubuntu[00m:[01;34m~/Documents/lab/5SEM/SS/ex14[00m$ exit
exit

Script done on Wed 19 Oct 2016 08:08:21 AM IST
