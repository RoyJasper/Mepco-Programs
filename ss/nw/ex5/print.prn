----------------------------------------------------------------
NAME: ROY JASPER C S							14BIT058			   EX 5-->ITERATIVE UNRELIABLE USING UDP
----------------------------------------------------------------
			ENCRYPTION AND DECRYPTION
SERVER:
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>

int main()
{
  int soc,i,j=0,odc=0,evc=0,n ;
  char str[20],nstr[20],od[20],ev[20];
  struct sockaddr_in serv, cli;
  struct sockaddr_storage store;
  socklen_t len, clen;

  soc = socket(PF_INET, SOCK_DGRAM, 0);  
  serv.sin_family = AF_INET;
  serv.sin_port = htons(9999);
  serv.sin_addr.s_addr = htonl(INADDR_ANY);
  
  bind(soc, (struct sockaddr *) &serv, sizeof(serv));

  len = sizeof store;
   
   recvfrom(soc,str,100,0,(struct sockaddr *)&store, &len);
   printf("\n\n%s\n\n",str);
   n=strlen(str);
   for(i=0;str[i]!='$';i++)
   {
     ev[j]=str[i];
     j++;evc++;
   }
   ev[j]='\0';
   int k=0;
	   for(i=j+1;i<n;i++)
   {
     od[k]=str[i];
     k++;odc++;
   }
   od[k]='\0';
   printf("\n\n%s\n\n",od);
   printf("\n\n%s\n\n",ev); 
	j=0;
	for(i=0;i<n;i=i+2) 
	{
		nstr[i]=ev[j];
		j++;
	}
	j=0;
	for(i=1;i<n;i=i+2) 
	{
		nstr[i]=od[j];
		j++;
	}
	 printf("\n\n%s\n\n",nstr); 
   sendto(soc,nstr,100,0,(struct sockaddr *)&store,len);

  return 0;
}

CLIENT:
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

  int main()
{
  int cs, pno, byt,j=0,i,evc=0,odc=0;
  char str[20],strs[20],od[20],ev[20],fin[20],tstr[20];
  struct sockaddr_in serv;
  socklen_t len;

  
  cs = socket(PF_INET, SOCK_DGRAM, 0);

  
  serv.sin_family = AF_INET;
  serv.sin_port = htons(9999);
  serv.sin_addr.s_addr = htonl(INADDR_ANY);
  memset(serv.sin_zero, '\0', sizeof serv.sin_zero);  

  
    len = sizeof serv;

   
    printf("Type a sentence to send to server:\n");
    scanf("%s",str);
    printf("You typed: %s\n ",str);
    int n = strlen(str);
    for(i=0;i<n;i=i+2)
	{
	  ev[j]=str[i];
	  j++;
	  evc++;
	}
    ev[j]='\0';
    j=0;
    for(i=1;i<n;i=i+2)
	{
	  od[j]=str[i];
	  j++;
	  odc++;
	}
    od[j]='\0';
printf("\n\n%s\n\n",od);
printf("\n\n%s\n\n",ev); 

strcat(ev,"$");
strcat(ev,od);
  
printf("\n\n%s\n\n",ev);

    /*Send message to server*/
    sendto(cs,ev,100,0,(struct sockaddr *)&serv,len);
  
    /*Receive message from server*/
    recvfrom(cs,strs,100,0,NULL, NULL);
    printf("Received from server: %s\n",strs);
    if(strcmp(str,strs)==0)
    {
	printf("\n\n Messages are same !!");
    }
    else
    {
       printf("Wrong message");
    }    
  return 0;
}

OUTPUT:

SERVER:
Running....

Received :  pppp$oooo

Message is :popopopo

CLIENT:
 
Enter Message to send: popopopo

Encrypted Message is : pppp$oooo
----------------------------------------------------------------
				BIT ENCRYPTION 
SERVER:
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int soc,i,j=0,odc=0,evc=0,n ;
    char str[20],nstr[20],od[20],ev[20];
    struct sockaddr_in serv, cli;
    struct sockaddr_storage store;
    socklen_t len, clen;

    soc = socket(PF_INET, SOCK_DGRAM, 0);
    serv.sin_family = AF_INET;
    serv.sin_port = htons(8888);
    serv.sin_addr.s_addr = htonl(INADDR_ANY);

    bind(soc, (struct sockaddr *) &serv, sizeof(serv));

    len = sizeof store;

    recvfrom(soc,str,100,0,(struct sockaddr *)&store, &len);
    printf("\n\n%s\n\n",str);
    n=strlen(str);
     printf("\nMEssage is \n");
    for(i=2; i<n-2;i=i+2)
    {
        if(str[i]=='0'&&str[i+1]=='1')
        {
            printf("0");
        }
        else
        printf("1");
    }
    return 0;
}

CLIENT:
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main()
{
    int cs, pno, byt,j=0,i,evc=0,odc=0;
    char str[20],strs[20],od[20],ev[20],fin[20],tstr[20];
    struct sockaddr_in serv;
    socklen_t len;
    cs = socket(PF_INET, SOCK_DGRAM, 0);
    serv.sin_family = AF_INET;
    serv.sin_port = htons(8888);
    serv.sin_addr.s_addr = htonl(INADDR_ANY);
    memset(serv.sin_zero, '\0', sizeof serv.sin_zero);
    len = sizeof serv;
    printf("Type a bit sequence to send to server:\n");
    scanf("%s",str);
    printf("You typed: %s\n ",str);
    int n = strlen(str);
    strs[0]='0';
    strs[1]='0';

    j=2;
    for(i=0; i<n; i++)
    {
        if(str[i]=='0')
        {
            strs[j]='0';
            strs[j+1]='1';
        }
        else
        {
            strs[j]='1';
            strs[j+1]='0';
        }
        j+=2;
    }
    strcat(strs,"11");
    printf("%d\n",strlen(strs));
    printf("\n Sending string is %s \n ",strs);
    sendto(cs,strs,100,0,(struct sockaddr *)&serv,len);
    return 0;
}

OUTPUT:

SERVER:
 Running....

Received message is : 00100111

Message is : 10

CLIENT:

Enter Message : 10

Encrypted Message is : 00100111
----------------------------------------------------------------
			    MESSAGE SEND AND RECEIVE USING JAVA

SERVER:
import java.io.*;
import java.net.*;
 
public class udp_server
{
    public static void main(String args[])
    {
        DatagramSocket sock = null;
         
        try
        {
            //1. creating a server socket, parameter is local port number
            sock = new DatagramSocket(7777);
             
            //buffer to receive incoming data
            byte[] buffer = new byte[65536];
            DatagramPacket incoming = new DatagramPacket(buffer, buffer.length);
             
            //2. Wait for an incoming data
            echo("Server socket created. Waiting for incoming data...");
             
            //communication loop
            while(true)
            {
                sock.receive(incoming);
                byte[] data = incoming.getData();
                String s = new String(data, 0, incoming.getLength());
                 
                //echo the details of incoming data - client ip : client port - client message
                echo(incoming.getAddress().getHostAddress() + " : " + incoming.getPort() + " - " + s);
                 
                s = "OK : " + s;
                DatagramPacket dp = new DatagramPacket(s.getBytes() , s.getBytes().length , incoming.getAddress() , incoming.getPort());
                sock.send(dp);
            }
        }
         
        catch(IOException e)
        {
            System.err.println("IOException " + e);
        }
    }
     
    //simple function to echo data to terminal
    public static void echo(String msg)
    {
        System.out.println(msg);
    }
}

CLIENT:

import java.io.*;
import java.net.*;
 
class 
{
    public static void main(String args[])
    {
        DatagramSocket sock = null;
        int port = 7777;
        String s;
         
        BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));
         
        try
        {
            sock = new DatagramSocket();
             
            InetAddress host = InetAddress.getByName("localhost");
             
            while(true)
            {
                
                echo("Enter message to send : ");
                s = (String)cin.readLine();
                byte[] b = s.getBytes();
                 
                DatagramPacket  dp = new DatagramPacket(b , b.length , host , port);
                sock.send(dp);
                 
                byte[] buffer = new byte[65536];
                DatagramPacket reply = new DatagramPacket(buffer, buffer.length);
                sock.receive(reply);
                 
                byte[] data = reply.getData();
                s = new String(data, 0, reply.getLength());
                 
                
                echo(reply.getAddress().getHostAddress() + " : " + reply.getPort() + " - " + s);
            }
        }
         
        catch(IOException e)
        {
            System.err.println("IOException " + e);
        }
    }
     
    
    public static void echo(String msg)
    {
        System.out.println(msg);
    }
}

OUTPUT:

SERVER:
Running....

Received Message is : jasper

CLIENT:

Enter Message to Send : jasper
----------------------------------------------------------------
			MESSAGE SEND AND RECEIVE USING C

SERVER:
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <stdlib.h>

int main()
{
    int udpSocket, nBytes;
    char buffer[1024];
    struct sockaddr_in serverAddr, clientAddr;
    struct sockaddr_storage serverStorage;
    socklen_t addr_size, client_addr_size;
    int i;
    udpSocket = socket(PF_INET, SOCK_DGRAM, 0);

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(9999);
    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    bind(udpSocket, (struct sockaddr *) &serverAddr, sizeof(serverAddr));
    addr_size = sizeof serverStorage;

    while(1)
    {
        nBytes = recvfrom(udpSocket,buffer,1024,0,(struct sockaddr *)&serverStorage, &addr_size);

            sendto(udpSocket,buffer,nBytes,0,(struct sockaddr *)&serverStorage,addr_size);
    }

    return 0;
}

CLIENT:
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>

int main()
{
    int clientSocket, portNum, nBytes;
    char buffer[1024];
    struct sockaddr_in serverAddr;
    socklen_t addr_size;clientSocket = socket(PF_INET, SOCK_DGRAM, 0);
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(7891);
    serverAddr.sin_addr.s_addr = htonl(INADDR_ANY);
    memset(serverAddr.sin_zero, '\0', sizeof serverAddr.sin_zero);
    addr_size = sizeof serverAddr;

    while(1)
    {
        printf("Type a sentence to send to server:\n");
        fgets(buffer,1024,stdin);
        printf("You typed: %s",buffer);
        nBytes = strlen(buffer) + 1;
        /*Send message to server*/
        sendto(clientSocket,buffer,nBytes,0,(struct sockaddr *)&serverAddr,addr_size);
        /*Receive message from server*/
        nBytes = recvfrom(clientSocket,buffer,1024,0,NULL, NULL);
        printf("Received from server: %s\n",buffer);
    }
    return 0;
}

OUTPUT:

SERVER:
Running....

Received Message is : jasper

CLIENT:

Enter Message to Send : jasper
