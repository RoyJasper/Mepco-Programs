****************************************

LOADER


EX:
NO:8                   14BIT049


V.KIRAN RAJ

**************************************

#include<stdio.h>

#include<string.h>

#include<stdlib.h>

#include<math.h>

void binary(char x)

{

    if((int)x==48)

    {

        printf("0000 ");

    }

    else if((int)x==49)

    {

        printf("0001 ");

    }

    else

    {

        int c[10],e[10];

        int r,l,a,i=0,count=0;

        a=(int)x;

        if(a>57)

            a=a-55;

        else

            a=a-48;

        if(a<4)

            printf("00");

        else if(a>=4 && a<8)

            printf("0");

        while(a!=0)

        {

            c[i] = a%2;

            a = a / 2;

            count++;

            i++;

        }

        for(i=count-1; i>=0; i--)

        {

            printf("%d", c[i]);

        }

        printf(" ");



    }



}

char* convert(char xs[])

{



    int hex[20], dec,i,  j, k,ch, p;

    i =0;

    p=0;

    dec=0;

    k=0;

    while ((ch=xs[k++]) != '\0')

    {

        if ((ch > 47 && ch < 58) || (ch > 64 && ch < 71))

            hex[i++] = ch;

    }

    for (j = i-1; j >= 0; j-- )

    {

        if (hex[j] > 57)

            dec +=  (hex[j] - 55) * (int)pow((double)16, p);

        else

            dec +=  (hex[j] - 48) * (int)pow((double)16, p);

        p++;

    }

    int temp,quotient;

    char h[100];

    quotient = dec+1;

    while(quotient!=0)

    {

        temp = quotient % 16;

        if( temp < 10)

            temp=temp + 48;

        else

            temp = temp + 55;

        h[i++]= temp;



        quotient = quotient / 16;

    }

    int r=i;


    k=0;

    i=r;

    char *he = (char*)malloc(sizeof(char)*100);

    for (j = i -1 ; j> 0; j--)

        he[k++]=h[j];

    he[k]='\0';

    return he;

}

main()

{

    int i;

    FILE *fp;

    fp=fopen("p2out.c","r");

    char x,y[100],s[100],loc[100],n[100],l[100],start[100],name[100],length[100];

    x=fgetc(fp);

    while(x!=EOF)

    {

        if(x=='H')

        {

            x=getc(fp);

            x=getc(fp);

            i=0;

            while(x!='^')

            {

                n[i]=x;

                x=getc(fp);

                i++;

            }

            n[i]='\0';



            x=getc(fp);

            i=0;

            while(x!='^')

            {

                s[i]=x;

                x=getc(fp);

                i++;

            }

            s[i]='\0';



            x=getc(fp);

            i=0;

            while((int)x!=10)

            {

                l[i]=x;

                x=getc(fp);

                i++;

            }

            l[i]='\0';

            printf("\n enter the program name  :");

            scanf("%s",name);



            if(strcmp(n,name)!=0)

            {

                printf("\n program name is incorrect\n");

                exit(0);

            }

            printf("\n enter the starting address   :");

            scanf("%s",start);

            if(strcmp(s,start)!=0)

            {

                printf("\n program starting address is incorrect\n");

                exit(0);

            }

            printf("\n enter the lenght of the program  : ");

            scanf("%s",length);

            if(strcmp(l,length)!=0)

            {

                printf("\n program length is incorrect\n");

                exit(0);

            }

            printf("\n************************************************\n\t\t\t   ABSOLUTE LOADER\n**************************************************\n");



        }

        else if(x=='T')

        {

            i=0;

            x=getc(fp);

            x=getc(fp);

            while(x!='^')

            {

                y[i]=x;

                i++;

                x=getc(fp);



            }

            y[i]='\0';

            strcpy(loc,y);

            x=getc(fp);

            while(x!='^')

            {

                x=getc(fp);

            }

            x=getc(fp);

            while((int)x!=10)

            {

                if(x=='^')

                {

                    x=getc(fp);

                }

                else

                {

                    printf(" %s ",loc);

                    binary(x);

                    x=getc(fp);

                    binary(x);

                    printf("\n");

                    strcpy(loc,convert(loc));

                    // printf(" %s ",loc);

                    x=getc(fp);

                }



            }

        }

        else if(x=='E')

        {

            exit(0);

        }

        x=getc(fp);

    }

}



OUTPUT:


enter the program name  :
ADD

enter the starting address   :1000

enter the lenght of the program  : 12

************************************************
ABSOLUTE LOADER
**************************************************
1000 0000 0000
1001 0001 0000
1002 0000 1001
1003 0001 1000
1004 0001 0000
1005 0000 1100
1006 0000 1100
1007 0001 0000
1008 0000 1111
1009 0001 0001
100A 0001 0001
100B 0001 0001
100C 0001 0001
100D 0001 0001
100E 0001 0001
2000 0000 0001
2001 0010 0011
2002 0100 0101
2003 0110 0111
2004 1000 1001
2005 1010 1011
2006 1100 1101
2007 1110 1111


























PASS ONE OF TWO PASS ASSEMBLER

***************************************************
LOC   LABLE   MNEMONIC OPERAND OPCODE
***************************************************

$       ADD     START   2000    $
2000    $       LDA     FIVE    002015
2003    $       STA     ALPHA   0C200C
2006    $       ADD     THREE   182019
2009    $       STA     BETA    0C201C
200C    ALPHA   RESW    3       $
2015    FIVE    BYTE    X'F1'   F1
2016    SIX     BYTE    C'EOF'          454F46
2019    THREE   WORD    10      00000A
201C    BETA    RESB    4096    $
301C         $       END     $       $

************************************************


