Script started on Sun 06 Sep 2015 10:57:00 PM IST
bash-3.2$ cat stacck[K[Kck[K[Kk.[Khead.h
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
struct node
{
char data;
struct node *next;
};
typedef struct node * stack;
void push(char,stack);
char pop(stack);
int isempty(stack);
void makeempty(stack);
void display(stack);
int paranthesis(char[],stack);
void infix(char[],stack);
int priority(char);
void postfix(char[],stack);

bash-3.2$ cat stackim.c
#include"stackhead.h"
void push(char x,stack top)
{
stack temp;
temp=(stack)malloc(sizeof(struct node));
temp->data=x;
temp->next=top->next;
top->next=temp;
}
char pop(stack top)
{
stack t;
char a;
t=top->next;
top->next=top->next->next;
a=t->data;
free(t);
return a;
}
int isempty(stack top)
{
if(top->next==NULL)
{
return 1;
}
else
{
return 0;
}
}
void makeempty(stack top)
{
int a;
while(top->next!=NULL)
{
a=pop(top);
printf("%c",a);
}
}
void display(stack top)
{
stack t;
t=top->next;
while(t!=NULL)
{
printf("%c",t->data);
t=t->next;
}
}
int paranthesis(char d[20],stack top)
{
char x,t;
int c,i=0;
while(d[i]!='\0')
{
if(isalnum(d[i])||d[i]=='+'||d[i]=='-'||d[i]=='*'||d[i]=='/')
{
i++;
continue;
}
if(d[i]=='['||d[i]=='('||d[i]=='{')
{
t=d[i];
push(t,top);
i++;
}
else if(d[i]==']'||d[i]==')'||d[i]=='}')
{
c=isempty(top);
if(c==1)
{
printf("Missing of open paranthesis");
return 0;
}
else
{
x=pop(top);
if(x=='('&&d[i]==')')
{
i++;
continue;
}
else
if(x=='['&&d[i]==']')
{
i++;
continue;
}
else
if(x=='{'&&d[i]=='}')
{
i++;
continue;
}
else
printf("Miss match of paranthesis");
return 0;
}
}
}
if(!isempty(top))
{
printf("Missing of closing paranthesis");
makeempty(top);
return 0;
}
else
{
printf("VALID EXPRESSION");
return 0;
}
}
void postfix(char a[20],stack top)
{
int e,i,s,x,d;
while(a[i]!='\0')
{
if(isalpha(a[i]))
{
printf("Enter the value of %c:",a[i]);
scanf("%d",&d);
push(d,top);
i++;
}
else if(a[i]=='+')
{
d=pop(top);
e=pop(top);
s=d+e;
push(s,top);
i++;
}
else if(a[i]=='-')
{
d=pop(top);
e=pop(top);
s=e-d;
push(s,top);
i++;
}
else if(a[i]=='*')
{
d=pop(top);
e=pop(top);
s=d*e;
push(s,top);
i++;
}
else if(a[i]=='/')
{
d=pop(top);
e=pop(top);
s=e/d;
push(s,top);
i++;
}
}
x=pop(top);
printf("The Answer is %d",x);
}
void infix(char b[50],stack top)
{
int i=0,q,j;
char t,d,f,x,g,c;
while(b[i]!='\0')
{
if(isalpha(b[i]))
{
printf("%c",b[i]);
i++;
}
else if(b[i]=='('||b[i]=='{'||b[i]=='[')
{
push(b[i],top);
i++;
}
else if(b[i]==')'||b[i]=='}'||b[i]==']')
{
d=pop(top);
while(d!='('||d!='{'||d!='[')
{
printf("%c",d);
d=pop(top);
}
i++;
}
else
{
if(isempty(top))
{
push(b[i],top);
i++;
}
else
{
begin:
g=pop(top);
//if(g=='*'||g=='+'||g=='-'||g=='/')
//{
if(priority(g)>=priority(b[i]))
{
//push(b[i],top);
printf("%c",g);
if(!isempty(top))
{
goto begin;
}
push(b[i],top);
i++;
}
else
{
push(g,top);
push(b[i],top);
i++;
}
//}
}
}
}
makeempty(top);
}
int priority(char x)
{
if(x=='-')
return 0;
else if(x=='+')
return 1;
else if(x=='*')
return 2;
else if(x=='/')
return 3;
}

bash-3.2$ s[Kcat stacapp.c
#include"stackhead.h"
main()
{
int a,i,j,v,choice,r;
char b,c[20],d[20],e[20];
stack top;
top=(stack)malloc(sizeof(struct node));
top->next=NULL;
while(1)
{
printf("\n1.PUSH\n2.POP\n3.ISEMPTY\n4.MAKEEMPTY\n5.DISPLAY\n6.PARANTHESIS\n7.INFIXTOPOSTFIX\n8.POSTFIX EVALUATION\n9.exit\nENTER THE CHOICE");
scanf("%d",&choice);
switch(choice)
{
case 1: printf("ENTER THE CHARACTER");
scanf("%s",&b);
push(b,top);
printf("IT IS INSERTED SUCCESSFULLY");
break;
case 2:
b=pop(top);
printf("%c IS DELETED",b);
break;
case 3:
i=isempty(top);
if(i==1)
{
printf("STACK IS EMPTY");
}
else
{
printf("STACK IS NOT EMPTY");
}
break;
case 4:
makeempty(top);
break;
case 5:
display(top);
break;
case 6:
printf("ENTER THE EXPRESSION");
scanf(" %s",d);
v=paranthesis(d,top);
break;
case 7:
printf("ENTER THE EXPRESSION");
scanf(" %s",c);
//printf("%s",c);
infix(c,top);
break;
case 8:
printf("ENTER THE EXPRESSION");
scanf(" %s",e);
postfix(e,top);
break;
case 9:
exit (0);
}
}
}

bash-3.2$ cd stackim.c -c
bash: cd: stackim.c: Not a directory
bash-3.2$ cc stackim.c -c
bash-3.2$ cc stacapp.c stackim.o
bash-3.2$ ./a.out

1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 1
ENTER THE CHARACTER 5
IT IS INSERTED SUCCESSFULLY
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 1
ENTER THE CHARACTER 9
IT IS INSERTED SUCCESSFULLY
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 1
ENTER THE CHARACTER 6
IT IS INSERTED SUCCESSFULLY
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 5
695
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 2
6 IS DELETED
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 3
STACK IS NOT EMPTY
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 4
95
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 3
STACK IS EMPTY
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 6
ENTER THE EXPRESSION (a+b}
Miss match of paranthesis
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 7
ENTER THE EXPRESSION a+b
ab+
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 7
ENTER THE EXPRESSION a*b/c-d
abc/*d-
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 8
ENTER THE EXPRESSION a+ b+c-
Segmentation fault
bash-3.2$ ./a.out

1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 8
ENTER THE EXPRESSION abc+-   +c-
Enter the value of a: 5
Enter the value of b: 10
Enter the value of c: 50
The Answer is -35
1.PUSH
2.POP
3.ISEMPTY
4.MAKEEMPTY
5.DISPLAY
6.PARANTHESIS
7.INFIXTOPOSTFIX
8.POSTFIX EVALUATION
9.exit
ENTER THE CHOICE 9
bash-3.2$ exit
exit

Script done on Sun 06 Sep 2015 11:01:27 PM IST
