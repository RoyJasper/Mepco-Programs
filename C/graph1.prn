***************************************************************************
EXNO:11            NAME:RAHUL RAJAN D
DATE:14.10.15      ROLLNO:14BIT053
************************************************************************
  IMPLEMENTATION OF GRAPH
	USING DIJKSTRA ALGORITHM
***********************************************************************
#include<stdio.h>
#include<stdlib.h>
struct node
{
int adj;
int cost;
struct node *next;
};
typedef struct node *list;
struct graphentry
{
int nov;
list *a;
};
typedef struct graphentry *graph;
struct tableentry
{
int known;
int dist;
int path;
};
typedef struct tableentry *table;
graph ginit(int);
void readgraph(graph);
table tinit(int,graph);
void dijkstra(graph,table);
int findmin(table,int);
void display(table,int);

bash-3.2$ cat graph1imp.c
#include"graph1head.h"
graph ginit(int n)
{
graph g;
int i;
g=(graph)malloc(sizeof(struct graphentry));
g->nov=n;
g->a=(list *)malloc(sizeof(struct node)*(n+1));
for(i=0;i<=n;i++)
{
g->a[i]=(list)malloc(sizeof(struct node));
g->a[i]->next=NULL;
}
return g;
}
void readgraph(graph g)
{
list t,temp;
int p,c,b,i,ch;
for(i=1;i<=g->nov;i++)
{
do
{
printf("IF U WANT TO ADD VERTEX %d PRESS 1",i);
scanf("%d",&c);
if(c==1)
{
printf("ENTER THE VALUE AND COST");
scanf("%d%d",&p,&b);
t=g->a[i];
temp=(list)malloc(sizeof(struct node));
temp->adj=p;
temp->cost=b;
temp->next=t->next;
t->next=temp;
}
}while(c==1);
}
}
table tinit(int s,graph g)
{
table t;
int i;
t=(table)malloc(sizeof(struct tableentry)*(g->nov+1));
for(i=1;i<=g->nov;i++)
{
t[i].known=0;
t[i].dist=9999;
t[i].path=0;
}
t[s].dist=0;
return t;
}
void dijkstra(graph g,table t)
{
int c,b,i;
for(i=1;i<=g->nov;i++)
{
b=findmin(t,g->nov);
if(b<1)
{
break;
}
else
{
t[b].known=1;
list temp;
temp=g->a[b];
while(temp->next!=NULL)
{
c=temp->next->adj;
if(t[c].known==0)
{
if(t[b].dist+temp->next->cost<t[c].dist)
{
t[c].dist=t[b].dist+temp->next->cost;
t[c].path=b;
}
}
temp=temp->next;
}
}
}
}
int findmin(table t,int n)
{
int min=0,m=9999,i;
for(i=1;i<=n;i++)
{
if((t[i].known==0)&&(m>t[i].dist))
{
m=t[i].dist;
min=i;
}
}
return min;
}
void display(table t,int n)
{
int i;
printf("\nVERTEX\tKNOWN\tDISTANCE\tPATH\n");
for(i=1;i<=n;i++)
{
printf("%d\t%d\t%d\t%d\n",i,t[i].known,t[i].dist,t[i].path);
}
}

bash-3.2$ cat graph1app.c
#include"graph1head.h"
main()
{
graph g;
table t;
int s,n;
printf("ENTER THE NO OF VERTEX");
scanf("%d",&n);
g=ginit(n);
readgraph(g);
printf("ENTER THE SOURCE VERTEX");
scanf("%d",&s);
t=tinit(s,g);
dijkstra(g,t);
display(t,n);
}

bash-3.2$ cc graph1imp.c -c
bash-3.2$ cc graph1app.c graph1imp.o
bash-3.2$ ./a.out
ENTER THE NO OF VERTEX 7
IF U WANT TO ADD VERTEX 1 PRESS 1 
1
ENTER THE VALUE AND COST 2 2
IF U WANT TO ADD VERTEX 1 PRESS 1 
1
ENTER THE VALUE AND COST 3 4
IF U WANT TO ADD VERTEX 1 PRESS 1 
1
ENTER THE VALUE AND COST 4 1
IF U WANT TO ADD VERTEX 1 PRESS 1 
2
IF U WANT TO ADD VERTEX 2 PRESS 1 
1
ENTER THE VALUE AND COST 4 3
IF U WANT TO ADD VERTEX 2 PRESS 1 
1
ENTER THE VALUE AND COST 5 10
IF U WANT TO ADD VERTEX 2 PRESS 1 
2
IF U WANT TO ADD VERTEX 3 PRESS 1 
1
ENTER THE VALUE AND COST 6 5
IF U WANT TO ADD VERTEX 3 PRESS 1 
2
IF U WANT TO ADD VERTEX 4 PRESS 1 
1
ENTER THE VALUE AND COST 3 2
IF U WANT TO ADD VERTEX 4 PRESS 1 
1
ENTER THE VALUE AND COST 6 8
IF U WANT TO ADD VERTEX 4 PRESS 1 
1
ENTER THE VALUE AND COST 7 4
IF U WANT TO ADD VERTEX 4 PRESS 1 
2
IF U WANT TO ADD VERTEX 5 PRESS 1 
1
ENTER THE VALUE AND COST 4 7
IF U WANT TO ADD VERTEX 5 PRESS 1 
1
ENTER THE VALUE AND COST 7 6
IF U WANT TO ADD VERTEX 5 PRESS 1 
2
IF U WANT TO ADD VERTEX 6 PRESS 1 
2
IF U WANT TO ADD VERTEX 7 PRESS 1 
1
ENTER THE VALUE AND COST 6 1
IF U WANT TO ADD VERTEX 7 PRESS 1 
2
ENTER THE SOURCE VERTEX 1

VERTEX	KNOWN			DISTANCE	PATH
1					1					0					0
2					1					2					1
3					1					3					4
4					1					1					1
5					1					12				2
6					1					6					7
7					1					5					4
bash-3.2$  exit
exit

Script done on Wed 14 Oct 2015 12:30:04 PM IST
