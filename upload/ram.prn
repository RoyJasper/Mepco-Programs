****************************************************************
name:m.ramanathan
dept:IT
ex no:4
_______________________________________________________________

pgm:

client:

#include<stdio.h>   
#include<string.h>  
#include<sys/socket.h>  
#include<arpa/inet.h>   

int main(int argc , char *argv[])
{
    int sock;
    struct sockaddr_in server;
    char message[1000] , server_reply[2000];

    //Create socket
    sock = socket(AF_INET , SOCK_STREAM , 0);
    if (sock == -1)
    {
        printf("cound'n create socket");
    }
    puts("Socket created");

    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_family = AF_INET;
    server.sin_port = htons( 8290 );

    //Connect to remote server
    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
    {
        printf("connection error");
        return 1;
    }

    puts("Connected\n");

    //keep communicating with server
    while(1)
    {
        printf("write your message : ");
        gets(message);

        //Send some data
        if( send(sock , message , strlen(message) , 0) < 0)
        {
            puts("send error");
            return 1;
        }

        //Receive a reply from the server
        bzero(server_reply,2000);
        if( recv(sock , server_reply , 2000 , 0) < 0)
        {
            puts("recv failed");
            break;
        }

        puts("Server reply :");
        puts(server_reply);
    }

    close(sock);
    return 0;
}

server:

#include<stdio.h>
#include<string.h>  //strlen
#include<sys/socket.h>
#include<arpa/inet.h>   //inet_addr
#include<unistd.h>  //write

int main(int argc , char *argv[])
{
   int socket_desc , client_sock , c , read_size;
   struct sockaddr_in server , client;
   char client_message[2000];
   char wellcome[]="wellcome", seeyou[]="see you",hi[]="hi",bye[]="bye",w[100];
   int count=0,i;
   socket_desc = socket(AF_INET , SOCK_STREAM , 0);
   if (socket_desc == -1)
   {
       printf("Could not create socket");
   }
   puts("Socket created");

   server.sin_family = AF_INET;
   server.sin_addr.s_addr = INADDR_ANY;
   server.sin_port = htons( 8290 );


   if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
   {
       
       printf("bind failed. Error");
       return 1;
   }
   puts("bind done");

  
   listen(socket_desc , 3);

   
   puts("Waiting for incoming connections...");
   c = sizeof(struct sockaddr_in);

   
   client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
   if (client_sock < 0)
   {
       printf("accept failed");
       return 1;
   }
   puts("Connection accepted"); 
   while( (read_size = recv(client_sock , client_message , 2000 , 0)) > 0 )
   {
       //Send the message back to client
         
       *(client_message + read_size) = '\0';
      count=0;
     for(i=0;client_message[i]!='\0';i++)
     {
      if(client_message[i]=='a'||client_message[i]=='e'||client_message[i]=='o'||client_message[i]=='i'||client_message[i]=='u')
      count++;
     }
     printf("***********%d********",count);
    snprintf(w,sizeof(w),"%d",count);         
    write(client_sock,w,strlen(w));
   }

   if(read_size == 0)
   {
       puts("Client disconnected");
       fflush(stdout);
   }
   else if(read_size == -1)
   {
       printf("recv failed");
   }
 printf("\n\n\n\noyeee");
   return 0;
}

output:

client:

socket created
bind done
Waiting for incoming connections...
Connection accepted

server:

connected
socket created

write your message : raman
Server reply :
2
write your message :
________________________________________________________
pgm: to print the time and date
________________________________________________________

client:

#include<stdio.h>   
#include<string.h>  
#include<sys/socket.h>  
#include<arpa/inet.h>   

int main(int argc , char *argv[])
{
    int sock;
    struct sockaddr_in server;
    char message[1000] , server_reply[2000];

    //Create socket
    sock = socket(AF_INET , SOCK_STREAM , 0);
    if (sock == -1)
    {
        printf("cound'n create socket");
    }
    puts("Socket created");

    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_family = AF_INET;
    server.sin_port = htons( 4514 );

    //Connect to remote server
    if (connect(sock , (struct sockaddr *)&server , sizeof(server)) < 0)
    {
        printf("connection error");
        return 1;
    }

    puts("Connected\n");

    //keep communicating with server
    while(1)
    {
        printf("write your message : ");
        gets(message);

        //Send some data
        if( send(sock , message , strlen(message) , 0) < 0)
        {
            puts("send error");
            return 1;
        }

        //Receive a reply from the server
        bzero(server_reply,2000);
        if( recv(sock , server_reply , 2000 , 0) < 0)
        {
            puts("recv failed");
            break;
        }

        puts("Server reply :");
        puts(server_reply);
    }

    close(sock);
    return 0;
}

server:

#include<stdio.h>
#include<string.h>  
#include<sys/socket.h>
#include<arpa/inet.h>  
#include<unistd.h>  
#include<time.h>
int main()
{
   time_t t;
   char w[200];
   int socket_desc , client_sock , c , read_size;
   struct sockaddr_in server , client;
   char client_message[2000];
   
   int count=0,i;
   socket_desc = socket(AF_INET , SOCK_STREAM , 0);
   if (socket_desc == -1)
   {
       printf("Could not create socket");
   }
   puts("Socket created");

   server.sin_family = AF_INET;
   server.sin_addr.s_addr = INADDR_ANY;
   server.sin_port = htons( 4514 );


   if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
   {
       
       printf("bind failed. Error");
       return 1;
   }
   puts("bind done");

  
   listen(socket_desc , 3);

   
   puts("Waiting for incoming connections...");
   c = sizeof(struct sockaddr_in);

   
   client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
   if (client_sock < 0)
   {
       printf("accept failed");
       return 1;
   }
   puts("Connection accepted"); 
   while( (read_size = recv(client_sock , client_message , 2000 , 0)) > 0 )
   {
       //Send the message back to client
       *(client_message + read_size) = '\0';
      
     
     if(strcmp(client_message,"time")==0)
    {
     time(&t);
    snprintf(w,sizeof(w),"%s",ctime(&t));
    write(client_sock,w,strlen(w));
   }
}
   if(read_size == 0)
   {
       puts("Client disconnected");
       fflush(stdout);
   }
   else if(read_size == -1)
   {
       printf("recv failed");
   }
 printf("\n\n\n\noyeee");
   return 0;
}

output:

client:

socket created
Connected

write your message : time
Server reply :
Sat Aug 13 10:52:19 2016

server:

Socket created
bind done
Waiting for incoming connections...
Connection accepted

___________________________________________________________________

pgm to identify whether the no is prime or not
___________________________________________________________________

pgm:

client:

import java.io.*;
import java.net.*;
class TCPClient
{
 public static void main(String argv[]) throws Exception
 {
  String sentence;
  String modifiedSentence;
  BufferedReader inFromUser = new BufferedReader( new InputStreamReader(System.in));
  Socket clientSocket = new Socket("localhost", 6032);
  DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
  BufferedReader inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
  while(true){
  sentence = inFromUser.readLine();
  outToServer.writeBytes(sentence + '\n');
  modifiedSentence = inFromServer.readLine();
  System.out.println("FROM SERVER: " + modifiedSentence);
  clientSocket.close();
  System.exit(-1);
}}}
                                                                                                                                                                       
server:

import java.io.*;
import java.net.*;

class Server
{
   public static void main(String argv[]) throws Exception
      {
         int a,i;
         int flag=0;
         String clientSentence;
         String sent="";
         ServerSocket welcomeSocket = new ServerSocket(6032);
         while(true)
         {
            Socket connectionSocket = welcomeSocket.accept();
            BufferedReader inFromClient =
               new BufferedReader(new InputStreamReader(t056@mepcolinux:~/net/ex4]javac TCPClient.java
[14bit056@mepcolinux:~/net/ex4]java TCPClient
5   connectionSocket.getInputStream()));
            DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());
            clientSentence = inFromClient.readLine();
            System.out.println("Received: " + clientSentence);
            a=Integer.parseInt(clientSentence);
            flag=0;
            if(a==1)
            {
            flag=2;
            sent="Neither Prime nor Composite";
            System.out.println("\nNeither Prime nor Composite");
            }
            if(a==2)
            {
            flag=2;
            sent="flag";
            System.out.println("\nPrime");
            }
            for(i=2;i<a/2;i++)
            {
            if(a%i==0)
            {
            flag=1;
            break;
            }
            }
            if(flag==0)
            {
            sent="prime";
            System.out.println("\nPrime");
            }
            if(flag==1){sent="not a prime";
            System.out.println("\nNot a Prime");}
            outToClient.writeBytes(sent);
         }
      }
}

output:

client

[14bit056@mepcolinux:~/net/ex4]javac TCPClient.java
[14bit056@mepcolinux:~/net/ex4]java TCPClient
5   

server:
[14bit056@mepcolinux:~/net/ex4]javac Server.java
[14bit056@mepcolinux:~/net/ex4]java Server
Received: 5

Prime
